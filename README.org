#+TITLE: led_system_ros
#+AUTHOR: Peter Polidoro
#+EMAIL: peter@polidoro.io

* Repository Information
- Author :: Peter Polidoro
- License :: BSD

* Setup

** ROS 2 and micro-ROS

*** Install Docker on host machine

#+BEGIN_SRC sh

sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install \
     ca-certificates \
     curl \
     gnupg \
     lsb-release -y
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
sudo groupadd docker
sudo usermod -aG docker $USER

#+END_SRC

*** Build Docker Image

#+BEGIN_SRC sh

cd led_system_ros
docker build -f Dockerfile.foxy -t microros:foxy .

#+END_SRC

*** Run Docker

#+BEGIN_SRC sh

docker run -it --net=host -v /dev:/dev --privileged microros:foxy

#+END_SRC

*** Test Docker inside container

#+BEGIN_SRC sh

source install/local_setup.bash
printenv | grep -i ROS

#+END_SRC

** Test micro-ROS application on Linux

*** Create a new firmware workspace

#+BEGIN_SRC sh

ros2 run micro_ros_setup create_firmware_ws.sh host

#+END_SRC

*** Build the firmware

#+BEGIN_SRC sh

ros2 run micro_ros_setup build_firmware.sh

#+END_SRC

*** Create the micro-ROS agent

#+BEGIN_SRC sh

ros2 run micro_ros_setup create_agent_ws.sh
ros2 run micro_ros_setup build_agent.sh
source install/local_setup.bash

#+END_SRC

*** Running and testing the micro-ROS app

**** Terminal 0

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_agent micro_ros_agent udp4 --port 8888

#+END_SRC

**** Terminal 1

#+BEGIN_SRC sh

cd ~/microros_ws
export RMW_IMPLEMENTATION=rmw_microxrcedds
ros2 run micro_ros_demos_rclc ping_pong

#+END_SRC

**** Terminal 2

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/ping

#+END_SRC

*** Terminal 3

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/pong

#+END_SRC

*** Terminal 4

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic pub --once /microROS/ping std_msgs/msg/Header '{frame_id: "fake_ping"}'

#+END_SRC

** Test micro-ROS application on Zephyr RTOS

*** Use docker to run ROS 2

#+BEGIN_SRC sh

docker run -it --net=host -v /dev:/dev --privileged ros:foxy

#+END_SRC

*** Install micro-ROS build system

#+BEGIN_SRC sh

source /opt/ros/$ROS_DISTRO/setup.bash
mkdir microros_ws
cd microros_ws
git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
sudo apt update && rosdep update
rosdep install --from-paths src --ignore-src -y
sudo apt-get install python3-pip
colcon build
source install/local_setup.bash
sudo apt install curl

#+END_SRC

*** Create a new firmware workspace

#+BEGIN_SRC sh

ros2 run micro_ros_setup create_firmware_ws.sh zephyr olimex-stm32-e407

#+END_SRC

*** Build the firmware

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_setup build_firmware.sh

#+END_SRC

*** Create the micro-ROS agent

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_setup create_agent_ws.sh
ros2 run micro_ros_setup build_agent.sh
source install/local_setup.bash

#+END_SRC

*** Running and testing the micro-ROS app

**** Terminal 0

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_agent micro_ros_agent udp4 --port 8888

#+END_SRC

**** Terminal 1

#+BEGIN_SRC sh

cd ~/microros_ws
export RMW_IMPLEMENTATION=rmw_microxrcedds
ros2 run micro_ros_demos_rclc ping_pong

#+END_SRC

**** Terminal 2

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/ping

#+END_SRC

*** Terminal 3

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/pong

#+END_SRC

*** Terminal 4

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic pub --once /microROS/ping std_msgs/msg/Header '{frame_id: "fake_ping"}'

#+END_SRC

** Test micro-ROS using Teensy with Arudino

*** Use docker to run ROS 2

#+BEGIN_SRC sh

docker run -it --net=host -v /dev:/dev --privileged ros:foxy

#+END_SRC

*** Install micro-ROS build system

#+BEGIN_SRC sh

source /opt/ros/$ROS_DISTRO/setup.bash
mkdir microros_ws
cd microros_ws
git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
sudo apt update && rosdep update
rosdep install --from-paths src --ignore-src -y
sudo apt-get install python3-pip
colcon build
source install/local_setup.bash
sudo apt install curl

#+END_SRC
