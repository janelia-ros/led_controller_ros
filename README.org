#+TITLE: led_system_ros
#+AUTHOR: Peter Polidoro
#+EMAIL: peter@polidoro.io

* Repository Information
- Author :: Peter Polidoro
- License :: BSD

* Setup

** Ubuntu 22.04

*** Install ROS 2 Humble

#+BEGIN_SRC sh

sudo apt update && sudo apt install locales
sudo locale-gen en_US en_US.UTF-8
sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
export LANG=en_US.UTF-8
sudo apt install software-properties-common
sudo add-apt-repository universe
sudo apt update && sudo apt install curl gnupg lsb-release
sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
sudo apt install ros-humble-desktop
sudo apt install python3-rosdep2
sudo apt-get install python3-pip
sudo apt install python3-colcon-common-extensions

#+END_SRC

*** Install the micro-ROS build system

#+BEGIN_SRC sh

source /opt/ros/humble/setup.bash
mkdir ~/microros_ws
cd ~/microros_ws
git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
sudo apt update && rosdep update
rosdep install --from-paths src --ignore-src -y
colcon build

#+END_SRC

*** Use direnv to automatically source setup file

**** Setup direnv

[[https://direnv.net/]]

**** Create .envrc file

#+BEGIN_SRC sh

cd ~/microros_ws
echo source /opt/ros/humble/setup.bash > .envrc
echo source install/local_setup.bash >> .envrc
direnv allow
printenv | grep -i ROS

#+END_SRC

** Test micro-ROS application on Linux

*** Create a new firmware workspace

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_setup create_firmware_ws.sh host

#+END_SRC

*** Build the firmware

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_setup build_firmware.sh

#+END_SRC

*** Create the micro-ROS agent

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_setup create_agent_ws.sh
ros2 run micro_ros_setup build_agent.sh
source install/local_setup.bash

#+END_SRC

*** Running and testing the micro-ROS app

**** Terminal 0

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_agent micro_ros_agent udp4 --port 8888

#+END_SRC

**** Terminal 1

#+BEGIN_SRC sh

cd ~/microros_ws
export RMW_IMPLEMENTATION=rmw_microxrcedds
ros2 run micro_ros_demos_rclc ping_pong

#+END_SRC

**** Terminal 2

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/ping

#+END_SRC

*** Terminal 3

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/pong

#+END_SRC

*** Terminal 4

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic pub --once /microROS/ping std_msgs/msg/Header '{frame_id: "fake_ping"}'

#+END_SRC

** Test micro-ROS application on Zephyr emulator

*** Install the micro-ROS build system

#+BEGIN_SRC sh

source /opt/ros/humble/setup.bash
rm -rf ~/microros_ws
mkdir ~/microros_ws
cd ~/microros_ws
git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
colcon build
echo source /opt/ros/humble/setup.bash > .envrc
echo source install/local_setup.bash >> .envrc
direnv allow

#+END_SRC

*** Create a new firmware workspace

#+BEGIN_SRC sh

cd ~/microros_ws/
ros2 run micro_ros_setup create_firmware_ws.sh zephyr host

#+END_SRC

*** Build the firmware

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_setup build_firmware.sh

#+END_SRC

*** Create the micro-ROS agent

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_setup create_agent_ws.sh
ros2 run micro_ros_setup build_agent.sh
source install/local_setup.bash

#+END_SRC

*** Running and testing the micro-ROS app

**** Terminal 0

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 run micro_ros_agent micro_ros_agent udp4 --port 8888

#+END_SRC

**** Terminal 1

#+BEGIN_SRC sh

cd ~/microros_ws
export RMW_IMPLEMENTATION=rmw_microxrcedds
ros2 run micro_ros_demos_rclc ping_pong

#+END_SRC

**** Terminal 2

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/ping

#+END_SRC

*** Terminal 3

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic echo /microROS/pong

#+END_SRC

*** Terminal 4

#+BEGIN_SRC sh

cd ~/microros_ws
ros2 topic pub --once /microROS/ping std_msgs/msg/Header '{frame_id: "fake_ping"}'

#+END_SRC

